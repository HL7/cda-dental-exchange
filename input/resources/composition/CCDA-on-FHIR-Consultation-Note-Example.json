{
	"resourceType": "Composition",
	"id": "CCDA-on-FHIR-Consultation-Note-Example",
	"meta": {
		"versionId": "1",
		"lastUpdated": "2020-02-11T23:10:03.031+00:00",
		"source": "#uCx5dDZvKEnOR0iP",
		"profile": [
			"http://hl7.org/fhir/us/ccda-r4/StructureDefinition/CCDA-on-FHIR-Consultation-Note"
		]
	},
	"language": "en-US",
	"text": {
		"status": "generated",
		"div": "<div xmlns=\"http://www.w3.org/1999/xhtml\">\n                  <table style=\"border: 1pt inset #00008b; line-height: 10pt; width: 100%;\" class=\"header_table\">\n                     <tbody>\n                        <tr>\n                           <td style=\"width: 20%; background-color: #3399ff; padding: 0.1cm 0.2cm; vertical-align: top; background-color: #ffffcc;\" class=\"td_header_role_name\">\n                              <span class=\"td_label\">Document Id</span>\n                           </td>\n                           <td class=\"td_header_role_value\">12345</td>\n                        </tr>\n                        <tr>\n                           <td style=\"width: 20%; background-color: #3399ff; padding: 0.1cm 0.2cm; vertical-align: top; background-color: #ffffcc;\" class=\"td_header_role_name\">\n                              <span class=\"td_label\">Document Created:</span>\n                           </td>\n                           <td class=\"td_header_role_value\">June 15, 2016, 16:14, PST </td>\n                        </tr>\n                     </tbody>\n                  </table>\n                  <table style=\"border: 1pt inset #00008b; line-height: 10pt; width: 100%;\" class=\"header_table\">\n                     <tbody>\n                        <tr>\n                           <td style=\"width: 20%; background-color: #3399ff; padding: 0.1cm 0.2cm; vertical-align: top; background-color: #ffffcc;\" class=\"td_header_role_name\">\n                              <span class=\"td_label\">Care Provision</span>\n                           </td>\n                           <td class=\"td_header_role_value\">Consultation for Amy Shaw</td>\n                        </tr>\n                        <tr>\n                           <td style=\"width: 20%; background-color: #3399ff; padding: 0.1cm 0.2cm; vertical-align: top; background-color: #ffffcc;\" class=\"td_header_role_name\">\n                              <span class=\"td_label\">Performer </span>\n                           </td>\n                           <td class=\"td_header_role_value\">Ronald Boone, MD</td>\n                        </tr>\n                     </tbody>\n                  </table>\n                  <table style=\"border: 1pt inset #00008b; line-height: 10pt; width: 100%;\" class=\"header_table\">\n                     <tbody>\n                        <tr>\n                           <td style=\"width: 20%; background-color: #3399ff; padding: 0.1cm 0.2cm; vertical-align: top; background-color: #ffffcc;\" class=\"td_header_role_name\">\n                              <span class=\"td_label\">Author</span>\n                           </td>\n                           <td class=\"td_header_role_value\">Ronald Boone, MD</td>\n                        </tr>\n                        <tr>\n                           <td style=\"width: 20%; background-color: #3399ff; padding: 0.1cm 0.2cm; vertical-align: top; background-color: #ffffcc;\" class=\"td_header_role_name\">\n                              <span class=\"td_label\">Contact info</span>\n                           </td>\n                           <td class=\"td_header_role_value\">1003 Healthcare Drive\n\t\t\t\t\t\t\t\t\t\t<br/>Amherst MA 01002, US <br/>Tel: +1(555)555-1003\n\t\t\t\t\t\t\t\t\t\t<br/>\n                           </td>\n                        </tr>\n                     </tbody>\n                  </table>\n                  <table style=\"border: 1pt inset #00008b; line-height: 10pt; width: 100%;\" class=\"header_table\">\n                     <tbody>\n                        <tr>\n                           <td style=\"width: 20%; background-color: #3399ff; padding: 0.1cm 0.2cm; vertical-align: top; background-color: #ffffcc;\" class=\"td_header_role_name\">\n                              <span class=\"td_label\">Encounter Id</span>\n                           </td>\n                           <td class=\"td_header_role_value\">9937012\n                                        2.16.840.1.113883.19</td>\n                        </tr>\n                        <tr>\n                           <td style=\"width: 20%; background-color: #3399ff; padding: 0.1cm 0.2cm; vertical-align: top; background-color: #ffffcc;\" class=\"td_header_role_name\">\n                              <span class=\"td_label\">Encounter Type</span>\n                           </td>\n                           <td class=\"td_header_role_value\">Consultation</td>\n                        </tr>\n                        <tr>\n                           <td style=\"width: 20%; background-color: #3399ff; padding: 0.1cm 0.2cm; vertical-align: top; background-color: #ffffcc;\" class=\"td_header_role_name\">\n                              <span class=\"td_label\">Encounter Date</span>\n                           </td>\n                           <td class=\"td_header_role_value\"> From June 15, 2016, 16:20 to\n                                        June 15, 2016, 18:20 </td>\n                        </tr>\n                        <tr>\n                           <td style=\"width: 20%; background-color: #3399ff; padding: 0.1cm 0.2cm; vertical-align: top; background-color: #ffffcc;\" class=\"td_header_role_name\">\n                              <span class=\"td_label\">Encounter Location</span>\n                           </td>\n                           <td class=\"td_header_role_value\">Ambulatory Care at Community\n                                        Health and Hospitals</td>\n                        </tr>\n                        <tr>\n                           <td style=\"width: 20%; background-color: #3399ff; padding: 0.1cm 0.2cm; vertical-align: top; background-color: #ffffcc;\" class=\"td_header_role_name\">\n                              <span class=\"td_label\">Responsible party</span>\n                           </td>\n                           <td class=\"td_header_role_value\">Ronald Boone, MD</td>\n                        </tr>\n                        <tr>\n                           <td style=\"width: 20%; background-color: #3399ff; padding: 0.1cm 0.2cm; vertical-align: top; background-color: #ffffcc;\" class=\"td_header_role_name\">\n                              <span class=\"td_label\">Contact info</span>\n                           </td>\n                           <td class=\"td_header_role_value\">1003 Healthcare Drive\n\t\t\t\t\t\t\t\t\t\t<br/>Amherst MA 01002, US <br/>Tel: +1(555)555-1003\n\t\t\t\t\t\t\t\t\t\t<br/>\n                           </td>\n                        </tr>\n                     </tbody>\n                  </table>\n                  <table style=\"border: 1pt inset #00008b; line-height: 10pt; width: 100%;\" class=\"header_table\">\n                     <tbody>\n                        <tr>\n                           <td style=\"width: 20%; background-color: #3399ff; padding: 0.1cm 0.2cm; vertical-align: top; background-color: #ffffcc;\" class=\"td_header_role_name\">\n                              <span class=\"td_label\">Assigned entity</span>\n                           </td>\n                           <td class=\"td_header_role_value\">Community Health and Hospitals\n\t\t\t\t\t\t\t\t\t\t<br/>\n                           </td>\n                        </tr>\n                        <tr>\n                           <td style=\"width: 20%; background-color: #3399ff; padding: 0.1cm 0.2cm; vertical-align: top; background-color: #ffffcc;\" class=\"td_header_role_name\">\n                              <span class=\"td_label\">Emergency contact</span>\n                           </td>\n                           <td class=\"td_header_role_value\">Michael Shaw <br/>\n                              <br/>\n                           </td>\n                        </tr>\n                        <tr>\n                           <td style=\"width: 20%; background-color: #3399ff; padding: 0.1cm 0.2cm; vertical-align: top; background-color: #ffffcc;\" class=\"td_header_role_name\">\n                              <span class=\"td_label\">Contact info</span>\n                           </td>\n                           <td class=\"td_header_role_value\">49 Meadow St <br/>Amherst MA\n                                        01003, US <br/>Tel: (555)555-1212 <br/>\n                           </td>\n                        </tr>\n                        <tr>\n                           <td style=\"width: 20%; background-color: #3399ff; padding: 0.1cm 0.2cm; vertical-align: top; background-color: #ffffcc;\" class=\"td_header_role_name\">\n                              <span class=\"td_label\">Care giver</span>\n                           </td>\n                           <td class=\"td_header_role_value\">Mrs. Lillian White <br/>\n                           </td>\n                        </tr>\n                        <tr>\n                           <td style=\"width: 20%; background-color: #3399ff; padding: 0.1cm 0.2cm; vertical-align: top; background-color: #ffffcc;\" class=\"td_header_role_name\">\n                              <span class=\"td_label\">Contact info</span>\n                           </td>\n                           <td class=\"td_header_role_value\">49 Meadow St <br/>Amherst MA\n                                        01003, US <br/>Tel: (555)555-1215 <br/>\n                           </td>\n                        </tr>\n                     </tbody>\n                  </table>\n                  <table style=\"border: 1pt inset #00008b; line-height: 10pt; width: 100%;\" class=\"header_table\">\n                     <tbody>\n                        <tr>\n                           <td style=\"width: 20%; background-color: #3399ff; padding: 0.1cm 0.2cm; vertical-align: top; background-color: #ffffcc;\" class=\"td_header_role_name\">\n                              <span class=\"td_label\">Entered by</span>\n                           </td>\n                           <td class=\"td_header_role_value\">Sally Jones</td>\n                        </tr>\n                        <tr>\n                           <td style=\"width: 20%; background-color: #3399ff; padding: 0.1cm 0.2cm; vertical-align: top; background-color: #ffffcc;\" class=\"td_header_role_name\">\n                              <span class=\"td_label\">Contact info</span>\n                           </td>\n                           <td class=\"td_header_role_value\">1003 Healthcare Drive\n\t\t\t\t\t\t\t\t\t\t<br/>Amherst MA 01002, US <br/>Tel: +1(555)555-1003\n\t\t\t\t\t\t\t\t\t\t<br/>\n                           </td>\n                        </tr>\n                     </tbody>\n                  </table>\n                  <table style=\"border: 1pt inset #00008b; line-height: 10pt; width: 100%;\" class=\"header_table\">\n                     <tbody>\n                        <tr>\n                           <td style=\"width: 20%; background-color: #3399ff; padding: 0.1cm 0.2cm; vertical-align: top; background-color: #ffffcc;\" class=\"td_header_role_name\">\n                              <span class=\"td_label\">Signed </span>\n                           </td>\n                           <td class=\"td_header_role_value\">Ronald Boone at June 15, 2016\n\t\t\t\t\t\t\t\t\t</td>\n                        </tr>\n                        <tr>\n                           <td style=\"width: 20%; background-color: #3399ff; padding: 0.1cm 0.2cm; vertical-align: top; background-color: #ffffcc;\" class=\"td_header_role_name\">\n                              <span class=\"td_label\">Contact info</span>\n                           </td>\n                           <td class=\"td_header_role_value\">1003 Healthcare Drive\n\t\t\t\t\t\t\t\t\t\t<br/>Amherst MA 01002, US <br/>Tel: +1(555)555-1003\n\t\t\t\t\t\t\t\t\t\t<br/>\n                           </td>\n                        </tr>\n                     </tbody>\n                  </table>\n                  <table style=\"border: 1pt inset #00008b; line-height: 10pt; width: 100%;\" class=\"header_table\">\n                     <tbody>\n                        <tr>\n                           <td style=\"width: 20%; background-color: #3399ff; padding: 0.1cm 0.2cm; vertical-align: top; background-color: #ffffcc;\" class=\"td_header_role_name\">\n                              <span class=\"td_label\">Informant</span>\n                           </td>\n                           <td class=\"td_header_role_value\">Henry Vincent, CPh</td>\n                        </tr>\n                        <tr>\n                           <td style=\"width: 20%; background-color: #3399ff; padding: 0.1cm 0.2cm; vertical-align: top; background-color: #ffffcc;\" class=\"td_header_role_name\">\n                              <span class=\"td_label\">Contact info</span>\n                           </td>\n                           <td class=\"td_header_role_value\">1007 Pharmacy Drive\n\t\t\t\t\t\t\t\t\t\t<br/>Portland, OR 99123, US <br/>Tel: +1(555)555-1215\n\t\t\t\t\t\t\t\t\t\t<br/>\n                           </td>\n                        </tr>\n                     </tbody>\n                  </table>\n                  <table style=\"border: 1pt inset #00008b; line-height: 10pt; width: 100%;\" class=\"header_table\">\n                     <tbody>\n                        <tr>\n                           <td style=\"width: 20%; background-color: #3399ff; padding: 0.1cm 0.2cm; vertical-align: top; background-color: #ffffcc;\" class=\"td_header_role_name\">\n                              <span class=\"td_label\">Information recipient:</span>\n                           </td>\n                           <td class=\"td_header_role_value\">Primary Physician, MD</td>\n                        </tr>\n                        <tr>\n                           <td style=\"width: 20%; background-color: #3399ff; padding: 0.1cm 0.2cm; vertical-align: top; background-color: #ffffcc;\" class=\"td_header_role_name\">\n                              <span class=\"td_label\">Contact info</span>\n                           </td>\n                           <td class=\"td_header_role_value\">1005 St. Clair Avenue\n\t\t\t\t\t\t\t\t\t\t<br/>Amherst MA 01002, US <br/>Tel: +1(555)555-1666\n\t\t\t\t\t\t\t\t\t\t<br/>\n                           </td>\n                        </tr>\n                     </tbody>\n                  </table>\n                  <table style=\"border: 1pt inset #00008b; line-height: 10pt; width: 100%;\" class=\"header_table\">\n                     <tbody>\n                        <tr>\n                           <td style=\"width: 20%; background-color: #3399ff; padding: 0.1cm 0.2cm; vertical-align: top; background-color: #ffffcc;\" class=\"td_header_role_name\">\n                              <span class=\"td_label\">Legal authenticator</span>\n                           </td>\n                           <td class=\"td_header_role_value\">Ronald Boone, MD signed at June\n                                        15, 2016 </td>\n                        </tr>\n                        <tr>\n                           <td style=\"width: 20%; background-color: #3399ff; padding: 0.1cm 0.2cm; vertical-align: top; background-color: #ffffcc;\" class=\"td_header_role_name\">\n                              <span class=\"td_label\">Contact info</span>\n                           </td>\n                           <td class=\"td_header_role_value\">1003 Healthcare Drive\n\t\t\t\t\t\t\t\t\t\t<br/>Amherst MA 01002, US <br/>Tel: +1(555)555-1003\n\t\t\t\t\t\t\t\t\t\t<br/>\n                           </td>\n                        </tr>\n                     </tbody>\n                  </table>\n                  <table style=\"border: 1pt inset #00008b; line-height: 10pt; width: 100%;\" class=\"header_table\">\n                     <tbody>\n                        <tr>\n                           <td style=\"width: 20%; background-color: #3399ff; padding: 0.1cm 0.2cm; vertical-align: top; background-color: #ffffcc;\" class=\"td_header_role_name\">\n                              <span class=\"td_label\">Document maintained by</span>\n                           </td>\n                           <td class=\"td_header_role_value\">Community Health and\n                                        Hospitals</td>\n                        </tr>\n                        <tr>\n                           <td style=\"width: 20%; background-color: #3399ff; padding: 0.1cm 0.2cm; vertical-align: top; background-color: #ffffcc;\" class=\"td_header_role_name\">\n                              <span class=\"td_label\">Contact info</span>\n                           </td>\n                           <td class=\"td_header_role_value\">1003 Healthcare Drive\n\t\t\t\t\t\t\t\t\t\t<br/>Amherst MA 01002, US <br/>Tel: +1(555)555-1003\n\t\t\t\t\t\t\t\t\t\t<br/>\n                           </td>\n                        </tr>\n                     </tbody>\n                  </table>\n               </div>"
	},
	"identifier": {
		"system": "urn:ietf:rfc:3986",
		"value": "12345"
	},
	"status": "preliminary",
	"type": {
		"coding": [
			{
				"system": "http://loinc.org",
				"code": "11488-4",
				"display": "Consult Note"
			}
		]
	},
	"subject": {
		"reference": "Patient/example",
		"display": "Amy V. Shaw"
	},
	"encounter": {
		"reference": "Encounter/encounter-1",
		"display": "Encounter with patient Amy V. Shaw"
	},
	"date": "2016-02-28T09:10:14Z",
	"author": [
		{
			"reference": "PractitionerRole/ccda-practitionerrole-example",
			"display": "Ronald Bone, MD"
		}
	],
	"title": "Consultation Note",
	"attester": [
		{
			"mode": "legal",
			"time": "2012-01-04T09:10:14Z",
			"party": {
				"reference": "PractitionerRole/ccda-practitionerrole-example",
				"display": "Ronald Boone, MD"
			}
		}
	],
	"custodian": {
		"reference": "Organization/acme-lab",
		"display": "Acme Labs"
	},
	"event": [
		{
			"code": [
				{
					"coding": [
						{
							"system": "http://terminology.hl7.org/CodeSystem/v3-ActClass",
							"code": "PCPR",
							"display": "Care Provision"
						}
					]
				}
			],
			"period": {
				"start": "2015-11-18",
				"end": "2015-12-12"
			}
		}
	],
	"section": [
		{
			"title": "Advance Directives Section",
			"code": {
				"coding": [
					{
						"system": "http://loinc.org",
						"code": "42348-3",
						"display": "Advance directives"
					}
				]
			},
			"text": {
				"status": "generated",
				"div": "<div xmlns=\"http://www.w3.org/1999/xhtml\">\n                     <table>\n                        <tr>\n                           <td>\n                              <b>Name</b>\n                           </td>\n                           <td>\n                              <b>Applies Period</b>\n                           </td>\n                        </tr>\n                        <tr>\n                           <td>Resuscitation</td>\n                           <td>2015/01/01 - 2016/12/31</td>\n                        </tr>\n                     </table>\n                  </div>"
			}
		},
		{
			"title": "Allergies and Intolerances Section",
			"code": {
				"coding": [
					{
						"system": "http://loinc.org",
						"code": "48765-2",
						"display": "Allergies and adverse reactions Document"
					}
				]
			},
			"text": {
				"status": "generated",
				"div": "<div xmlns=\"http://www.w3.org/1999/xhtml\">\n                     <table>\n                        <tr>\n                           <td>\n                              <b>Substance</b>\n                           </td>\n                           <td>\n                              <b>Overall Severity</b>\n                           </td>\n                           <td>\n                              <b>Reaction</b>\n                           </td>\n                           <td>\n                              <b>Reaction Severity</b>\n                           </td>\n                           <td>\n                              <b>Status</b>\n                           </td>\n                        </tr>\n                        <tr>\n                           <td>Cashew Nut</td>\n                           <td>Severe</td>\n                           <td>Anaphylactic reaction</td>\n                           <td>Mild</td>\n                           <td>Active</td>\n                        </tr>\n                     </table>\n                  </div>"
			},
			"entry": [
				{
					"reference": "AllergyIntolerance/allergy-intolerance"
				}
			]
		},
		{
			"title": "Assessment Section",
			"code": {
				"coding": [
					{
						"system": "http://loinc.org",
						"code": "51848-0",
						"display": "Evaluation note"
					}
				]
			},
			"text": {
				"status": "generated",
				"div": "<div xmlns=\"http://www.w3.org/1999/xhtml\">\n                     <p>Obesity.</p>\n                     <p>Uncontrolled brittle Type II diabetic.</p>\n                     <p>Shortness of breath, mild wheezing.</p>\n                     <p>Pressure ulder on left knee.</p>\n                  </div>"
			}
		},
		{
			"title": "Assessment and Plan Section",
			"code": {
				"coding": [
					{
						"system": "http://loinc.org",
						"code": "51847-2",
						"display": "Evaluation + Plan note"
					}
				]
			},
			"text": {
				"status": "generated",
				"div": "<div xmlns=\"http://www.w3.org/1999/xhtml\">\n                     <p>Recurrent GI bleed of unknown etiology; hypotension perhaps secondary\n                                to this but as likely secondary to polypharmacy</p>\n                     <p>Acute on chronic anemia secondary to #1.</p>\n                     <p>Azotemia, acute renal failure with volume loss secondary tom#1.</p>\n                     <p>Hyperkalemia secondary to #3 and on ACE and K+ supplement.</p>\n                     <p>Other chronic diagnoses as noted above, currently stable.</p>\n                  </div>"
			}
		},
		{
			"title": "Chief Complaint and Reason for Visit Section",
			"code": {
				"coding": [
					{
						"system": "http://loinc.org",
						"code": "46239-0",
						"display": "Chief complaint+Reason for visit Narrative"
					}
				]
			},
			"text": {
				"status": "generated",
				"div": "<div xmlns=\"http://www.w3.org/1999/xhtml\">\n                     <p>Cramping, bloating, and constipation.</p>\n                  </div>"
			}
		},
		{
			"title": "Chief Complaint Section",
			"code": {
				"coding": [
					{
						"system": "http://loinc.org",
						"code": "10154-3",
						"display": "Chief complaint Narrative - Reported"
					}
				]
			},
			"text": {
				"status": "generated",
				"div": "<div xmlns=\"http://www.w3.org/1999/xhtml\">\n                     <p>Dark Stools</p>\n                  </div>"
			}
		},
		{
			"title": "Family History Section",
			"code": {
				"coding": [
					{
						"system": "http://loinc.org",
						"code": "10157-6",
						"display": "History of family member diseases Narrative"
					}
				]
			},
			"text": {
				"status": "generated",
				"div": "<div xmlns=\"http://www.w3.org/1999/xhtml\">\n                     <table>\n                        <tr>\n                           <td>\n                              <b>Relationship</b>\n                           </td>\n                           <td>\n                              <b>Diagnosis</b>\n                           </td>\n                           <td>\n                              <b>Age at Onset</b>\n                           </td>\n                        </tr>\n                        <tr>\n                           <td>Father</td>\n                           <td>Myocardial Infarction(cause of Death)</td>\n                           <td>57</td>\n                        </tr>\n                        <tr>\n                           <td>Father</td>\n                           <td>Diabetes</td>\n                           <td>40</td>\n                        </tr>\n                     </table>\n                  </div>"
			}
		},
		{
			"title": "Functional Status Section",
			"code": {
				"coding": [
					{
						"system": "http://loinc.org",
						"code": "47420-5",
						"display": "Functional status assessment note"
					}
				]
			},
			"text": {
				"status": "generated",
				"div": "<div xmlns=\"http://www.w3.org/1999/xhtml\">\n                     <table>\n                        <tr>\n                           <td>\n                              <b>Functional or Cognitive Finding</b>\n                           </td>\n                           <td>\n                              <b>Observation</b>\n                           </td>\n                           <td>\n                              <b>Observation Date</b>\n                           </td>\n                           <td>\n                              <b>Condition Status</b>\n                           </td>\n                        </tr>\n                        <tr>\n                           <td>Ambulation (Dependent to Independent</td>\n                           <td>Independently able</td>\n                           <td>2010/03/11</td>\n                           <td>Active</td>\n                        </tr>\n                        <tr>\n                           <td>Finding of Functional Performance and Activity</td>\n                           <td>Dyspnea</td>\n                           <td>2008/02/16</td>\n                           <td>Active</td>\n                        </tr>\n                        <tr>\n                           <td>Cognitive Function Finding</td>\n                           <td>Memory Impairment</td>\n                           <td>2014/04/29</td>\n                           <td>Active</td>\n                        </tr>\n                     </table>\n                  </div>"
			}
		},
		{
			"title": "General Status Section",
			"code": {
				"coding": [
					{
						"system": "http://loinc.org",
						"code": "10210-3",
						"display": "Physical findings of General status Narrative"
					}
				]
			},
			"text": {
				"status": "generated",
				"div": "<div xmlns=\"http://www.w3.org/1999/xhtml\">\n                     <p>Alert and in good spirits, no acute distress.</p>\n                  </div>"
			}
		},
		{
			"title": "Past Medical History Section",
			"code": {
				"coding": [
					{
						"system": "http://loinc.org",
						"code": "11348-0",
						"display": "History of Past illness Narrative"
					}
				]
			},
			"text": {
				"status": "generated",
				"div": "<div xmlns=\"http://www.w3.org/1999/xhtml\">\n                     <p>See History of Present Illness</p>\n                  </div>"
			}
		},
		{
			"title": "History of Present Illness Section",
			"code": {
				"coding": [
					{
						"system": "http://loinc.org",
						"code": "10164-2",
						"display": "History of Present illness Narrative"
					}
				]
			},
			"text": {
				"status": "generated",
				"div": "<div xmlns=\"http://www.w3.org/1999/xhtml\">\n                     <p>This patient was only recently discharged for a recurrent GI bleed as\n                                described below. </p>\n                     <p>He presented to the ER today c/o a dark stool yesterday but a normal\n                                brown stool today. On exam he was hypotensive in the 80?s resolved\n                                after .... .... .... </p>\n                     <p>Lab at discharge: Glucose 112, BUN 16, creatinine 1.1, electrolytes\n                                normal. H. pylori antibody pending. Admission hematocrit 16%,\n                                discharge hematocrit 29%. WBC 7300, platelet count 256,000.\n                                Urinalysis normal. Urine culture: No growth. INR 1.1, PTT 40. </p>\n                     <p>He was transfused with 6 units of packed red blood cells with ....\n                                .... .... </p>\n                     <p>GI evaluation 12 September: Colonoscopy showed single red clot in\n                                .... ........ </p>\n                  </div>"
			}
		},
		{
			"title": "Immunizations Section",
			"code": {
				"coding": [
					{
						"system": "http://loinc.org",
						"code": "11369-6",
						"display": "History of Immunization Narrative"
					}
				]
			},
			"text": {
				"status": "generated",
				"div": "<div xmlns=\"http://www.w3.org/1999/xhtml\">\n                     <table>\n                        <tr>\n                           <td>\n                              <b>Vaccine</b>\n                           </td>\n                           <td>\n                              <b>Date</b>\n                           </td>\n                           <td>\n                              <b>Status</b>\n                           </td>\n                        </tr>\n                        <tr>\n                           <td>Fluvax (Influenza)</td>\n                           <td>2016-04-05</td>\n                           <td>Completed</td>\n                        </tr>\n                     </table>\n                  </div>"
			},
			"entry": [
				{
					"reference": "Immunization/immunization"
				}
			]
		},
		{
			"title": "Medical Equipment Section",
			"code": {
				"coding": [
					{
						"system": "http://loinc.org",
						"code": "46264-8",
						"display": "History of medical device use"
					}
				]
			},
			"text": {
				"status": "generated",
				"div": "<div xmlns=\"http://www.w3.org/1999/xhtml\">\n                     <table>\n                        <tr>\n                           <td>\n                              <b>Supply/Device</b>\n                           </td>\n                           <td>\n                              <b>Date Supplied</b>\n                           </td>\n                        </tr>\n                        <tr>\n                           <td>Automatic Implantable cardioverter/defbrillator</td>\n                           <td>2008/11/16</td>\n                        </tr>\n                        <tr>\n                           <td>Wheelchair</td>\n                           <td>1999/12/01</td>\n                        </tr>\n                     </table>\n                  </div>"
			}
		},
		{
			"title": "Medication Section",
			"code": {
				"coding": [
					{
						"system": "http://loinc.org",
						"code": "10160-0",
						"display": "History of Medication use Narrative"
					}
				]
			},
			"text": {
				"status": "generated",
				"div": "<div xmlns=\"http://www.w3.org/1999/xhtml\">\n                     <table>\n                        <tr>\n                           <td>\n                              <b>Medication</b>\n                           </td>\n                           <td>\n                              <b>Directions</b>\n                           </td>\n                           <td>\n                              <b>Start Date</b>\n                           </td>\n                           <td>\n                              <b>Status</b>\n                           </td>\n                           <td>\n                              <b>Indications</b>\n                           </td>\n                           <td>\n                              <b>Fill Instructions</b>\n                           </td>\n                        </tr>\n                        <tr>\n                           <td>Amoxicillin</td>\n                           <td>Amoxicillin Powder, for Suspension 250mg/5ml</td>\n                           <td>20160401</td>\n                           <td>Active</td>\n                           <td>Pneumonia</td>\n                           <td>Generic substitution allowed</td>\n                        </tr>\n                     </table>\n                  </div>"
			},
			"entry": [
				{
					"reference": "MedicationStatement/medication-statement"
				}
			]
		},
		{
			"title": "Mental Status Section",
			"code": {
				"coding": [
					{
						"system": "http://loinc.org",
						"code": "10190-7",
						"display": "Mental status"
					}
				]
			},
			"text": {
				"status": "generated",
				"div": "<div xmlns=\"http://www.w3.org/1999/xhtml\">\n                     <table border=\"1\" width=\"100%\">\n                        <thead>\n                           <tr>\n                              <td>\n                                 <b>Mental Status Findings</b>\n                              </td>\n                              <td>\n                                 <b>Effective Dates</b>\n                              </td>\n                              <td>\n                                 <b>Condition Status</b>\n                              </td>\n                           </tr>\n                        </thead>\n                        <tr>\n                           <td>Mental Function</td>\n                           <td>July 31, 2013</td>\n                           <td>Impaired</td>\n                        </tr>\n                        <tr>\n                           <td>Cognitive Abilities</td>\n                           <td>July 31, 2013</td>\n                           <td>Judgement, Intact</td>\n                        </tr>\n                        <tr>\n                           <td>Cognitive Function</td>\n                           <td>July 31, 2013</td>\n                           <td>Aggressive Behavior</td>\n                        </tr>\n                        <tr>\n                           <td>Cognitive Function</td>\n                           <td>July 31, 2013</td>\n                           <td>Difficulty understanding own emotions</td>\n                        </tr>\n                        <tr>\n                           <td>Cognitive Function</td>\n                           <td>July 31, 2013</td>\n                           <td>Difficulty communicating Thoughts </td>\n                        </tr>\n                     </table>\n                  </div>"
			}
		},
		{
			"title": "Nutrition Section",
			"code": {
				"coding": [
					{
						"system": "http://loinc.org",
						"code": "61144-2",
						"display": "Diet and nutrition Narrative"
					}
				]
			},
			"text": {
				"status": "generated",
				"div": "<div xmlns=\"http://www.w3.org/1999/xhtml\">\n                     <table>\n                        <tr>\n                           <td>\n                              <b>Date</b>\n                           </td>\n                           <td>\n                              <b>Nutritional Status</b>\n                           </td>\n                           <td>\n                              <b>Diet</b>\n                           </td>\n                        </tr>\n                        <tr>\n                           <td>2005/12/29</td>\n                           <td>Well nourished</td>\n                           <td>Low sodium diet, excessive carbohydrate</td>\n                        </tr>\n                        <tr>\n                           <td>2010/05/26</td>\n                           <td>Slight dehydration</td>\n                           <td>High protein, low fibre</td>\n                        </tr>\n                     </table>\n                  </div>"
			}
		},
		{
			"title": "Physical Exam Section",
			"code": {
				"coding": [
					{
						"system": "http://loinc.org",
						"code": "29545-1",
						"display": "Physical findings Narrative"
					}
				]
			},
			"text": {
				"status": "generated",
				"div": "<div xmlns=\"http://www.w3.org/1999/xhtml\">\n                     <p>HEENT: All normal to examination.</p>\n                     <p>&gt;HEART: RRR, no murmur.</p>\n                     <p>THORAX &amp; LUNGS: Clear without rhonchi or wheeze.</p>\n                     <p>ABDOMEN: Marked distension and tenderness, slightly obese, pos\n                                bowelsounds.</p>\n                     <p>BACK: Normal to inspection and palpation, without tenderness; no\n                                presacral edema.</p>\n                     <p>EXTREMITIES: Doughy edema bilaterally, chronic stasis changes, no\n                                asymmetrical swelling.</p>\n                  </div>"
			}
		},
		{
			"title": "Plan of Treatment Section",
			"code": {
				"coding": [
					{
						"system": "http://loinc.org",
						"code": "18776-5",
						"display": "Plan of care note"
					}
				]
			},
			"text": {
				"status": "generated",
				"div": "<div xmlns=\"http://www.w3.org/1999/xhtml\">\n                     <table>\n                        <tr>\n                           <td>\n                              <b>Planned Activity</b>\n                           </td>\n                           <td>\n                              <b>Period</b>\n                           </td>\n                           <td>\n                              <b>Status</b>\n                           </td>\n                        </tr>\n                        <tr>\n                           <td>Colonoscopy</td>\n                           <td>2010/08/16 - 2010/08/16</td>\n                           <td>Completed</td>\n                        </tr>\n                        <tr>\n                           <td>Recommendation to Exercise</td>\n                           <td>2015/10/29</td>\n                           <td>Ongoing</td>\n                        </tr>\n                     </table>\n                  </div>"
			}
		},
		{
			"title": "Problem Section",
			"code": {
				"coding": [
					{
						"system": "http://loinc.org",
						"code": "11450-4",
						"display": "Problem list - Reported"
					}
				]
			},
			"text": {
				"status": "generated",
				"div": "<div xmlns=\"http://www.w3.org/1999/xhtml\">\n                     <table>\n                        <tr>\n                           <td>\n                              <b>Problem Name</b>\n                           </td>\n                           <td>\n                              <b>Type</b>\n                           </td>\n                           <td>\n                              <b>Onset Date</b>\n                           </td>\n                           <td>\n                              <b>Abatement Date</b>\n                           </td>\n                           <td>\n                              <b>Status</b>\n                           </td>\n                        </tr>\n                        <tr>\n                           <td>Liveborn born in hospital</td>\n                           <td>Condition</td>\n                           <td/>\n                           <td/>\n                           <td>Complete</td>\n                        </tr>\n                     </table>\n                  </div>"
			},
			"entry": [
				{
					"reference": "Condition/condition-problem"
				}
			]
		},
		{
			"title": "Procedures Section",
			"code": {
				"coding": [
					{
						"system": "http://loinc.org",
						"code": "47519-4",
						"display": "History of Procedures Document"
					}
				]
			},
			"text": {
				"status": "generated",
				"div": "<div xmlns=\"http://www.w3.org/1999/xhtml\">\n                     <table>\n                        <tr>\n                           <td>\n                              <b>Procedure Name</b>\n                           </td>\n                           <td>\n                              <b>Body Site</b>\n                           </td>\n                           <td>\n                              <b>Performer</b>\n                           </td>\n                           <td>\n                              <b>Date Performed</b>\n                           </td>\n                           <td>\n                              <b>Reason</b>\n                           </td>\n                        </tr>\n                        <tr>\n                           <td>Appendectomy (Procedure)</td>\n                           <td>Abdomen</td>\n                           <td>Dr. Adam Everyman</td>\n                           <td>20160405</td>\n                           <td>Generalized abdominal pain 24 hours. Localized in RIF with\n                                        rebound and guarding</td>\n                        </tr>\n                     </table>\n                  </div>"
			},
			"entry": [
				{
					"reference": "Procedure/procedure-rehab"
				}
			]
		},
		{
			"title": "Reason for Visit Section",
			"code": {
				"coding": [
					{
						"system": "http://loinc.org",
						"code": "29299-5",
						"display": "Reason for visit"
					}
				]
			},
			"text": {
				"status": "generated",
				"div": "<div xmlns=\"http://www.w3.org/1999/xhtml\">\n                     <p>Tenderness of lower abdomen</p>\n                  </div>"
			}
		},
		{
			"title": "Results Section",
			"code": {
				"coding": [
					{
						"system": "http://loinc.org",
						"code": "30954-2",
						"display": "Relevant diagnostic tests/laboratory data Narrative"
					}
				]
			},
			"text": {
				"status": "generated",
				"div": "<div xmlns=\"http://www.w3.org/1999/xhtml\">\n                     <table>\n                        <tr>\n                           <td>\n                              <b>Result Type</b>\n                           </td>\n                           <td>\n                              <b>Quantity Value</b>\n                           </td>\n                           <td>\n                              <b>Date</b>\n                           </td>\n                           <td>\n                              <b>Status</b>\n                           </td>\n                        </tr>\n                        <tr>\n                           <td>Glucose [Moles/volume] in Blood</td>\n                           <td>6.3 mmol/l</td>\n                           <td>2016/04/01</td>\n                           <td>Final</td>\n                        </tr>\n                     </table>\n                  </div>"
			},
			"entry": [
				{
					"reference": "Observation/observation-lab-urine"
				}
			]
		},
		{
			"title": "Review of Systems Section",
			"code": {
				"coding": [
					{
						"system": "http://loinc.org",
						"code": "10187-3",
						"display": "Review of systems"
					}
				]
			},
			"text": {
				"status": "generated",
				"div": "<div xmlns=\"http://www.w3.org/1999/xhtml\">\n                     <p>Patient denies recent history of fever or malaise. Positive for\n                                weakness and shortness of breath. Several episodes of abdominal\n                                tenderness. No recent headaches. Positive for osteoarthritis in\n                                hips, knees and hands. </p>\n                  </div>"
			}
		},
		{
			"title": "Social History Section",
			"code": {
				"coding": [
					{
						"system": "http://loinc.org",
						"code": "29762-2",
						"display": "Social history Narrative"
					}
				]
			},
			"text": {
				"status": "generated",
				"div": "<div xmlns=\"http://www.w3.org/1999/xhtml\">\n                     <table>\n                        <tr>\n                           <td>\n                              <b>Social History Element</b>\n                           </td>\n                           <td>\n                              <b>Description</b>\n                           </td>\n                           <td>\n                              <b>Effective Dates</b>\n                           </td>\n                        </tr>\n                        <tr>\n                           <td>Smoking</td>\n                           <td>1 pack tobacco per day</td>\n                           <td>2005/05/01 - 2010/02/28</td>\n                        </tr>\n                     </table>\n                  </div>"
			},
			"entry": [
				{
					"reference": "Observation/observation-smoker"
				}
			]
		},
		{
			"title": "Vital Signs Section",
			"code": {
				"coding": [
					{
						"system": "http://loinc.org",
						"code": "8716-3",
						"display": "Vital signs"
					}
				]
			},
			"text": {
				"status": "generated",
				"div": "<div xmlns=\"http://www.w3.org/1999/xhtml\">\n                     <table>\n                        <tr>\n                           <td>\n                              <b>Vital Sign</b>\n                           </td>\n                           <td>\n                              <b>Date</b>\n                           </td>\n                           <td>\n                              <b>Value</b>\n                           </td>\n                        </tr>\n                        <tr>\n                           <td>Temperature</td>\n                           <td>2016/04/05</td>\n                           <td>39 Degrees Celcius</td>\n                        </tr>\n                     </table>\n                  </div>"
			},
			"entry": [
				{
					"reference": "Observation/observation-vitals-temp"
				}
			]
		}
	]
}